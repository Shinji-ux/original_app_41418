<div class="table_container">
  <div class="section-title">
    <%= @customer.company %>への納品書
  </div>

  <%= form_with(model: [@customer, @sell]) do |f| %>
    <div>
      <%= f.label :transaction_date, "納品日" %>
      <%= f.date_field :transaction_date, class: "form-group" %>
    </div>

    <table class="table-bordered">
      <thead>
        <tr>
          <th>カテゴリ</th>
          <th>商品</th>
          <th>数量</th>
          <th>単位</th>
          <th>単価</th>
          <th>合計</th>
        </tr>
      </thead>
      <tbody id="sell-item-forms">
        <%= f.fields_for :sell_items do |sell_item_form| %>
          <tr class="sell-item">
            <td><%= sell_item_form.collection_select :category_id, @categories, :id, :category, { prompt: "カテゴリを選択" }, { class: "sell-category-select" } %></td>
            <td><%= sell_item_form.collection_select :item_id, [], :id, :item_name, { prompt: "商品を選択" }, { class: "sell-item-select" } %></td>
            <td class="table-quantity"><%= sell_item_form.number_field :quantity, class: 'quantity-input' %></td>
            <td class="table-unit" id="unit">--</td>
            <td class="table-price"><%= sell_item_form.text_field :item_price, class: 'item-price' %></td>
            <td class="table-price"><%= sell_item_form.text_field :item_total_price, class: 'item-total-price' %></td>
          </tr>
        <% end %>  
      </tbody>
      <tfoot>
        <td class="table-total-text"><%= f.label :total_price, '総計' %></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td class="table-price"><%= f.text_field :total_price %></td>
      </tfoot>
    </table>

    <%# 追加ボタン %>
    <button type="button" id="add-form-set" class="add-form">商品を追加</button>

    <div class="box-wrap-btn">
      <%= f.submit "作成", class: "box-content" %>
    </div>
  <% end %>

  <div class="back">
  <%= link_to '前のページに戻る', suppliers_order_index_path %>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
    // 初期化
    initializeEvents();

    // フィールドセットを追加するボタンのイベント
    document.getElementById('add-form-set').addEventListener('click', function () {
      addNewFields();
    });

    // 合計価格を更新する関数
    function updateTotalPrice() {
      let totalPrice = 0;
      document.querySelectorAll('.sell-item').forEach(sellItem => {
        const itemTotalPriceInput = sellItem.querySelector('.item-total-price');
        const itemTotalPrice = parseFloat(itemTotalPriceInput.value) || 0;
        totalPrice += itemTotalPrice;
      });
      document.querySelector('input[name="sell[total_price]"]').value = totalPrice;
    }

    // イベント初期化の関数
    function initializeEvents() {
      document.querySelectorAll('.sell-category-select').forEach(categorySelect => {
        categorySelect.addEventListener('change', event => {
          const categoryId = event.target.value;
          const sellItem = event.target.closest('.sell-item');
          const itemSelect = sellItem.querySelector('.sell-item-select');
          const unitSpan = sellItem.querySelector('.table-unit');
          const itemPriceInput = sellItem.querySelector('.item-price');
          const itemTotalPriceInput = sellItem.querySelector('.item-total-price');
          const quantityInput = sellItem.querySelector('.quantity-input');

          itemSelect.innerHTML = '<option value="">商品を選択</option>';
          itemPriceInput.value = '';
          unitSpan.textContent = '--';
          itemTotalPriceInput.value = '';
          quantityInput.value = '';
          updateTotalPrice(); // 合計価格を更新

          if (categoryId) {
            fetch(`/categories/${categoryId}/items`)
              .then(response => response.json())
              .then(data => {
                data.items.forEach(item => {
                  const option = document.createElement('option');
                  option.value = item.id;
                  option.textContent = item.item_name;
                  itemSelect.appendChild(option);
                });
              })
              .catch(error => console.error('Error fetching items:', error));
          }
        });
      });

      document.querySelectorAll('.sell-item-select').forEach(itemSelect => {
        itemSelect.addEventListener('change', event => {
          const itemId = event.target.value;
          const sellItem = event.target.closest('.sell-item');
          const itemPriceInput = sellItem.querySelector('.item-price');
          const unitSpan = sellItem.querySelector('.table-unit');
          const itemTotalPriceInput = sellItem.querySelector('.item-total-price');
          const quantityInput = sellItem.querySelector('.quantity-input');
          let itemPrice = 0;

          itemPriceInput.value = ''; // リセット
          unitSpan.textContent = '--';
          itemTotalPriceInput.value = ''; // リセット
          quantityInput.value = '';
          updateTotalPrice(); // 合計価格を更新

          if (itemId) {
            fetch(`/items/${itemId}/details`)
              .then(response => response.json())
              .then(data => {
                itemPrice = data.price;
                unitSpan.textContent = data.unit;
                itemPriceInput.value = itemPrice;
                updateItemTotalPrice(sellItem, itemPrice);
              })
              .catch(error => console.error('Error fetching item details:', error));
          }
        });
      });

      document.querySelectorAll('.quantity-input').forEach(quantityInput => {
        quantityInput.addEventListener('input', event => {
          const sellItem = event.target.closest('.sell-item');
          const itemPrice = parseFloat(sellItem.querySelector('.item-price').value) || 0;
          updateItemTotalPrice(sellItem, itemPrice);
        });
      });

      // item-price に対してもイベントリスナーを追加
      document.querySelectorAll('.item-price').forEach(itemPriceInput => {
        itemPriceInput.addEventListener('input', event => {
          const sellItem = event.target.closest('.sell-item');
          const itemPrice = parseFloat(itemPriceInput.value) || 0;
          updateItemTotalPrice(sellItem, itemPrice);
        });
      });
    }

    // フィールドセット追加
    function addNewFields() {
      const existingSellItems = document.querySelectorAll('.sell-item');
      const newFields = existingSellItems[0].cloneNode(true);
      const newIndex = existingSellItems.length;

      newFields.querySelectorAll('input, select').forEach(input => {
        const name = input.getAttribute('name').replace(/\d+/, newIndex);
        const id = input.getAttribute('id').replace(/\d+/, newIndex);
        input.setAttribute('name', name);
        input.setAttribute('id', id);
        input.value = '';
      });

      newFields.querySelector('.table-unit').textContent = '--';
      document.getElementById('sell-item-forms').appendChild(newFields);
      initializeEvents();
    }

    // アイテムの合計価格を更新
    function updateItemTotalPrice(sellItem, itemPrice) {
      const quantityInput = sellItem.querySelector('.quantity-input');
      const itemTotalPriceInput = sellItem.querySelector('.item-total-price');
      const quantity = parseFloat(quantityInput.value) || 0;
      itemTotalPriceInput.value = (itemPrice * quantity);
      updateTotalPrice(); // 合計価格を更新
    }
  });
</script>
