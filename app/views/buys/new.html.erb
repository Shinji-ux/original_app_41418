<div class="table_container">
  <div class="section-title">
    <%= @supplier.company %>に発注する
  </div>

  <%= form_with(model: [@supplier, @buy]) do |f| %>
    <div>
      <%= f.label :transaction_date, "納品日" %>
      <%= f.date_field :transaction_date, class: "form-group" %>
    </div>

    <table class="table-bordered">
      <thead>
        <tr>
          <th>カテゴリ</th>
          <th>商品</th>
          <th>数量</th>
          <th>単位</th>
        </tr>
      </thead>
      <tbody id="buy-item-forms">
        <%= f.fields_for :buy_items do |buy_item_form| %>
          <tr class="buy-item">
            <td><%= buy_item_form.collection_select :category_id, @categories, :id, :category, { prompt: "カテゴリを選択" }, { class: "buy-category-select" } %></td>
            <td><%= buy_item_form.collection_select :item_id, [], :id, :item_name, { prompt: "商品を選択" }, { class: "buy-item-select" } %></td>
            <td class="table-unit"><%= buy_item_form.number_field :quantity, class: 'quantity-input' %></td>
            <td class="table-unit" id="unit">--</td>
          </tr>
        <% end %>  
      </tbody>
    </table>

    <%# 追加ボタン %>
    <button type="button" id="add-form-set" class="add-form">商品を追加</button>
    <p>※金額は、納品書受け取り後に「発注履歴の編集」から入力できます。</p>

    <div class="box-wrap-btn">
      <%= f.submit "作成", class: "box-content" %>
    </div>

  <% end %>

  <div class="back">
    <%= link_to '前のページに戻る', suppliers_order_index_path %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
  initializeEvents();

  // フィールドセットを追加するボタンのイベント
  document.getElementById('add-form-set').addEventListener('click', function () {
    addNewFields();
  });

  function initializeEvents() {
    document.querySelectorAll('.buy-category-select').forEach(categorySelect => {
      categorySelect.addEventListener('change', function() {
        const categoryId = this.value;
        const buyItem = this.closest('.buy-item');
        const itemSelect = buyItem.querySelector('.buy-item-select');

        if (categoryId && itemSelect) {
          fetch(`/categories/${categoryId}/items`)
            .then(response => response.json())
            .then(data => {
              itemSelect.innerHTML = '';
              itemSelect.insertAdjacentHTML('beforeend', '<option value="">商品を選択</option>');

              data.items.forEach(item => {
                const option = document.createElement('option');
                option.value = item.id;
                option.textContent = item.item_name;
                itemSelect.appendChild(option);
              });
            })
            .catch(error => console.error('Error fetching items:', error));
        }
      });
    });

    document.querySelectorAll('.buy-item-select').forEach(itemSelect => {
      itemSelect.addEventListener('change', function() {
        const itemId = this.value;
        const buyItem = this.closest('.buy-item');
        const unitSpan = buyItem.querySelector('#unit');

        if (itemId) {
          fetch(`/items/${itemId}/details`)
            .then(response => response.json())
            .then(data => {
              unitSpan.textContent = data.unit;
            })
            .catch(error => console.error('Error fetching item details:', error));
        } else {
          unitSpan.textContent = '--';
        }
      });
    });
  }

  function addNewFields() {
    const existingBuyItems = document.querySelectorAll('.buy-item');
    const newFields = existingBuyItems[0].cloneNode(true);
    const newIndex = existingBuyItems.length;

    newFields.querySelectorAll('input, select').forEach(input => {
      const name = input.getAttribute('name').replace(/\d+/, newIndex);
      const id = input.getAttribute('id').replace(/\d+/, newIndex);
      input.setAttribute('name', name);
      input.setAttribute('id', id);
      input.value = '';
    });

    document.getElementById('buy-item-forms').appendChild(newFields);
    initializeEvents();
  }
});
</script>